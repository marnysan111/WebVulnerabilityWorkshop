import MySQLdb
import os
from dotenv import load_dotenv
import logging
from modules.DBManager import DBManager
from faker import Faker
import hashlib

fake = Faker('jp-JP')

class EmployeeManager:
    def __init__(self):
        sql = "create table employee (\
        id int auto_increment,\
        name varchar(255),\
        email varchar(255),\
        password varchar(255), \
        index (id)\
        );"
        checkSQL = "show tables like 'employee';"

        conn = DBManager().connect_db()
        db = conn.cursor()
        db.execute(checkSQL)
        status = db.fetchall()
        try: 
            if len(status) == 0:
                db.execute(sql)
        except Exception as error:
            logging.error("SQL migration error: ", str(error))
        finally:
            self.create_dammy_data()
            conn.close() 

    def create_dammy_data(self):
        sql = "insert into employee (name, email, password) value(%s, %s, %s)"
        conn = DBManager().connect_db()
        status = self.read_all()
        if len(status) == 0: 
            try:
                db = conn.cursor()

                for _ in range(9):
                    fk = fake.password(length=8, special_chars=False, digits=False, upper_case=False, lower_case=True)
                    sha1 = hashlib.sha1()
                    sha1.update(fk.encode("utf-8"))
                    db.execute(sql, (fake.name(), fake.ascii_safe_email(), sha1.hexdigest()))
                db.execute(sql, ("印字 絵苦", "inject@example.com", "7c222fb2927d828af22f592134e8932480637c0d"))
                conn.commit()
            except Exception as error:
                logging.error("SQL error: ", str(error))
            finally:
                conn.close()

    def read_all(self):
        sql = "select * from employee;"
        conn = DBManager().connect_db()
        try:
            db = conn.cursor()
            db.execute(sql)
            results = db.fetchall()
            return results
        except Exception as error:
            logging.error("SQL Error: ", str(error))
        finally:
            conn.close()
                
    def read_by_name(self, name):
        sql = "select * from employee where name LIKE " + "'" + str(name) + "%';"
        conn = DBManager().connect_db()
        try:
            db = conn.cursor()
            db.execute(sql)
            results = db.fetchall()
            return results
        except Exception as error:
            logging.error("SQL Error: ", str(error))
        finally:
            conn.close()

    def read_by_email_passwd(self, email, passwd):
        sql = "select * from employee where email = %s AND password = %s"
        conn = DBManager().connect_db()
        try:
            db = conn.cursor()
            db.execute(sql, (email, passwd))
            results = db.fetchall()
            return results
        except Exception as error:
            logging.error("SQL Error: ", str(error))
        finally:
            conn.close()