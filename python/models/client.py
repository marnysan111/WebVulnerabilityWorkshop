import MySQLdb
import os
from dotenv import load_dotenv
import logging
from modules.DBManager import DBManager
from faker import Faker
import hashlib

fake = Faker('jp-JP')


class ClientManager:
    def __init__(self):
        sql = "create table client (\
            id int auto_increment, \
            name varchar(255), \
            email varchar(255), \
            service varchar(255),\
            credit_card varchar(255),\
            phone_number varchar(255),\
            index (id)\
            );"
        checkSQL = "show tables like 'client';"
        conn = DBManager().connect_db()
        db = conn.cursor()
        db.execute(checkSQL)
        status = db.fetchall()
        try: 
            if len(status) == 0:
                db.execute(sql)
                self.create_dammy_data()
        except Exception as error:
            logging.error("SQL migration error: [client]", str(error))
        finally:
            conn.close() 

    def create_dammy_data(self):
        sql = "insert into client (name, email, service, credit_card, phone_number) value(%s,%s,%s,%s,%s)"
        conn = DBManager().connect_db()
        db = conn.cursor()
        services = ['NexaTravel', 'FoodFusionHub', 'EcoRideConnect']
        try:
            for sevice in services:
                for _ in range(10):
                    db.execute(sql, (fake.name(), fake.ascii_safe_email(),sevice, fake.credit_card_number(), fake.phone_number()))
                    conn.commit()
        except Exception as error:
            logging.error("SQL error: ", str(error))
        finally:
            conn.close()

    def read_all(self):
        sql = "select * from client"
        conn = DBManager().connect_db()
        db = conn.cursor()
        try:
            db.execute(sql)
            results = db.fetchall()
            return results
        except Exception as error:
            logging.error("SQL error: ", str(error))
        finally:
            conn.close()

    def read_service_list(self):
        sql = "select DISTINCT service from client"
        conn = DBManager().connect_db()
        db = conn.cursor()
        try:
            db.execute(sql)
            results = db.fetchall()
            return [item[0] for item in results]
        except Exception as error:
            logging.error("SQL error: ", str(error))
        finally:
            conn.close()

    def read_by_service_name(self, service_name):
        sql = "select * from client where service = %s"
        conn = DBManager().connect_db()
        try:
            db = conn.cursor()
            db.execute(sql, (service_name,))
            results = db.fetchall()
            return results
        except Exception as error:
            logging.error("SQL error: ", str(error))
        finally:
            conn.close()