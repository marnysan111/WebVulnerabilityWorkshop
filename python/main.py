from flask import Flask, render_template, request, redirect, g, url_for, current_app, jsonify, send_file, session
from flask_cors import CORS
import requests
import os, base64, mimetypes
from urllib.parse import unquote
from modules.DBManager import DBManager
from models.employee import EmployeeManager
from faker import Faker
from flask_jwt_extended import JWTManager, jwt_required, create_access_token, get_jwt_identity
import hashlib
app = Flask(__name__)
CORS(app, origins=["http://react:3000"])

dbm = DBManager()
emm = EmployeeManager()

app.config['JWT_SECRET_KEY'] = '53715699B668513C62E8D7B16DD41'
jwt = JWTManager(app)
@app.route('/login', methods=['POST'])
def login():
    
    email = request.json['email']
    passwd = request.json['passwd']
    sha1Pass = hashlib.sha1()
    sha1Pass.update(passwd.encode("utf-8"))
    result = emm.read_by_email_passwd(email, sha1Pass.hexdigest())
    if result is ():
        return jsonify({'message': 'Invalid credentials'}), 401

    access_token = create_access_token(identity=request.json['email'])
    return jsonify(access_token=access_token)

@app.route('/logout', methods=["POST"])
def logout():
    session.pop("user", None)
    return jsonify({"message": "logout"})

@app.route('/check', methods=['GET'])
@jwt_required()
def check():
    access_token = get_jwt_identity()
    return jsonify({'access_token':access_token})

@app.route('/protected', methods=['GET'])
@jwt_required()
def protected():
    email = get_jwt_identity()
    return jsonify(logged_in_as=email), 200

@app.route('/image', methods=["GET"])
def Image():
    path = "images/" + request.args.get('path')

    if os.path.exists(path) and os.path.isfile(path):
        try:
            with open(path, 'rb') as image_file:
                encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
                return jsonify({'image': 'data:image/png;base64,' + encoded_string})
        except Exception as e:
            return jsonify({'message': str(e)}), 500
    else:
        return jsonify({'message': '画像が見つかりませんでした'}), 404

@app.route("/file", methods=["GET"])
def File():
    fileName = unquote(request.args.get('filename'))
    file = os.path.join('./file', fileName)
    if not os.path.isfile(file):
        return {"message": "file not found"}, 404
    return send_file(file)

@app.route('/employee/search', methods=["GET"])
def Employee():
    name = request.args.get('name')
    employee = emm.read_by_name(name)

    return jsonify({"employee": employee})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080, debug=True)