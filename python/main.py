from flask import Flask, render_template, request, redirect, g, url_for, current_app, jsonify, send_file, session
from flask_cors import CORS
import requests
import os, base64, mimetypes
from urllib.parse import unquote
from modules.DBManager import DBManager
from models.employee import EmployeeManager
from faker import Faker
from flask_jwt_extended import JWTManager, jwt_required, create_access_token, get_jwt_identity
import os
import hashlib
from datetime import timedelta

app = Flask(__name__)
CORS(app, origins=["http://react:3000"])

dbm = DBManager()
emm = EmployeeManager()
FILES_DIR = 'file'
app.config['JWT_SECRET_KEY'] = '53715699B668513C62E8D7B16DD41'
jwt = JWTManager(app)
@app.route('/login', methods=['GET'])
def login():
    try:
        email = request.args.get('email')
        passwd = request.args.get('passwd')
        sha1Pass = hashlib.sha1()
        sha1Pass.update(passwd.encode("utf-8"))
        result = emm.read_by_email_passwd(email, sha1Pass.hexdigest())
        access_token = create_access_token(identity=result[0][1])
        return jsonify(access_token=access_token)
    except Exception as e:
        return jsonify({'message': str(e)}), 500
@app.route('/logout', methods=["POST"])
def logout():
    session.pop("user", None)
    return jsonify({"message": "logout"})

@app.route('/check', methods=['GET'])
@jwt_required()
def check():
    access_token = get_jwt_identity()
    
    return jsonify({'access_token':access_token}), 200

@app.route('/protected', methods=['GET'])
@jwt_required()
def protected():
    email = get_jwt_identity()
    return jsonify(logged_in_as=email), 200

@app.route('/image', methods=["GET"])
def image():
    path = "images/" + request.args.get('path')
    try:
        with open(path, 'rb') as image_file:
            encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
            return jsonify({'image': 'data:image/png;base64,' + encoded_string})
    except Exception as e:
        return jsonify({'message': str(e)}), 500

@app.route("/file", methods=["GET"])
def file():
    fileName = unquote(request.args.get('filename'))
    try:
        file = os.path.join(FILES_DIR, fileName)
        return send_file(file)
    except Exception as e:
        return jsonify({'message': str(e)}), 500

@app.route('/file_list', methods=["GET"])
def file_list():
    files = os.listdir(FILES_DIR)
    return jsonify(files=files)

@app.route('/get_file', methods=['GET'])
def get_file():
    file_name = request.args.get('file_name')
    with open(os.path.join(FILES_DIR, file_name), 'r') as file:
        content = file.read()
    return jsonify(content=content)

@app.route('/save_file', methods=['POST'])
def save_file():
    file_path = FILES_DIR + '/' + request.json['file_name']

    content = request.json['content']
    with open(file_path, 'w') as file:
        file.write(content)
    return jsonify(success=True)

@app.route('/employee/search', methods=["GET"])
def employee():
    name = request.args.get('name')
    employee = emm.read_by_name(name)

    return jsonify({"employee": employee})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080, debug=True)