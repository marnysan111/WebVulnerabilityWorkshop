import React, {useState, useEffect} from 'react';
import Avatar from '@mui/material/Avatar';
import Button from '@mui/material/Button';
import CssBaseline from '@mui/material/CssBaseline';
import TextField from '@mui/material/TextField';
import Link from '@mui/material/Link';
import Grid from '@mui/material/Grid';
import Box from '@mui/material/Box';
import LockOutlinedIcon from '@mui/icons-material/LockOutlined';
import Typography from '@mui/material/Typography';
import Container from '@mui/material/Container';
import { createTheme, ThemeProvider } from '@mui/material/styles';
import axios from 'axios'; // インポート
import { redirect, useNavigate } from 'react-router-dom';
// TODO remove, this demo shouldn't need to reset the theme.
import ErrorAlert from '../components/ErrorAlert';

const defaultTheme = createTheme();

export default function SignIn() {
  const navigate = useNavigate()
  const [email, setEmail] = useState('')
  const [passwd, setPasswd] = useState('')
  const [error, setError] = useState('')
  const changeEmail = (event) => {
    setEmail(event.target.value);
  };
  const changePasswd = (event) => {
    setPasswd(event.target.value);
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (email === '') {
      setError('メールアドレスが空です')
      return
    }
    if (passwd === '') {
      setError('パスワードが空です')
      return
    }
    await axios.post('/login', {email: email, passwd: passwd})
    .then(res => {
      setError('');
      //navigate('/success');
      localStorage.setItem('access_token', res.data.access_token)
      
    })
    .catch(error => {
      setError('ログイン失敗')
      
    })
  };

const checkSession = (e) => {
  e.preventDefault();
  const token = localStorage.getItem('access_token');
  axios.get('/protected',{
    headers: {
        'Authorization': `Bearer ${token}`
    }
})
  .then(res => {
    setError('');
    console.log(res)
  })
  .catch(error => {
    if (error.response.status === 422) {
      setError('ログインしてください')
    } else {
      setError(error.response.data.message)
    }
  })
}

const logout = (e) => {
  localStorage.removeItem('access_token')
}
  
  return (
    <ThemeProvider theme={defaultTheme}>
    <ErrorAlert error={error} />
      <Container component="main" maxWidth="xs">
        <CssBaseline />
        <Box
          sx={{
            marginTop: 8,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
          }}
        >
          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>
            <LockOutlinedIcon />
          </Avatar>
          <Typography component="h1" variant="h5">
            ログイン画面
          </Typography>
          <Box component="form" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>
            <TextField
              margin="normal"
              required
              fullWidth
              label="メールアドレス"
              autoComplete="email"
              autoFocus
              value={email}
              onChange={changeEmail}
            />
            <TextField
              margin="normal"
              required
              fullWidth
              label="パスワード"
              type="password"
              autoComplete="current-password"
              value={passwd}
              onChange={changePasswd}
            />
            <Button
              type="submit"
              fullWidth
              variant="contained"
              sx={{ mt: 3, mb: 2 }}
            >
              ログイン
            </Button>
          </Box>
        </Box>
        <form onSubmit={checkSession}>
        <Button
              type="submit"
              fullWidth
              variant="contained"
              sx={{ mt: 3, mb: 2 }}
            >
              check
            </Button>
        </form>
        <Button
        onClick={logout}
              fullWidth
              variant="contained"
              sx={{ mt: 3, mb: 2 }}
            >
              logout
            </Button>
      </Container>
    </ThemeProvider>
  );
}